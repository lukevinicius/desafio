import React, {
  createContext,
  useState,
  useContext,
  ReactNode,
  useEffect,
  useCallback
} from 'react';

interface Marker {
  /* userId: string; */
  title: string;
  description: string;
  latitude: number;
  longitude: number;
}

interface MarkerContextData {
  markers: Marker[];
  createMarker: (marker: Marker) => Promise<void>;
  listMarkers: (body: Marker) => Promise<void>;
}

interface MarkerProviderProps {
  children: ReactNode;
}

const MarkerContext = createContext<MarkerContextData>({} as MarkerContextData);

function MarkerProvider({ children }: MarkerProviderProps) {
  const [data, setData] = useState<Marker[]>([]);

  async function createMarker({ /* userId, */ title, description, latitude, longitude }: Marker) {
    const info = {
      /* userId: userId, */
      title: title,
      description: description,
      latitude: latitude,
      longitude: longitude
    }
    data.push(info)
  }

  async function listMarkers() {
  }

  return (
    <MarkerContext.Provider
      value= {{
    markers: data,
      createMarker,
      listMarkers
  }
}
    >
  { children }
  < /MarkerContext.Provider>
  )
}

function useMarker(): MarkerContextData {
  const context = useContext(MarkerContext);

  return context;
}

export { MarkerProvider, useMarker }

{
          markersFound?.map((marker) => {
            <Marker
              coordinate={{
                latitude: marker.latitude,
                longitude: marker.longitude
              }}
              title={marker.title}
              description={marker.description} />
          })
        }